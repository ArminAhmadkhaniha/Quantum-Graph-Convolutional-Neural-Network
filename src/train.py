# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v3fWWBoUCwvZsyIy7Mmlyd4mmMeaQF2R
"""

import random
import numpy as np
import torch
from model import QuantumGCN
from data_prep import cora_dataset_preparation
from train_process import train
from test import test
from tqdm import tqdm


def set_seed(seed=42):
    # NumPy
    np.random.seed(seed)
    
    # Python Random
    random.seed(seed)
    
    # PyTorch
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    
    # Ensure deterministic algorithms
    torch.use_deterministic_algorithms(True)

set_seed(53)

train_loader, test_loader, A_norm, len_test_dataset = cora_dataset_preparation()

device = torch.device("cpu")
model = QuantumGCN(8).to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)
criterion = torch.nn.CrossEntropyLoss()
A_norm = A_norm.to(device)


#train_losses, test_accuracies = [], []

for epoch in range(25):
    train_losses = train(model, train_loader, A_norm, optimizer, criterion)
    test_accuracies = test(model, test_loader, A_norm, len_test_dataset)

    if epoch % 1 == 0:
        print(f"\nEpoch {epoch}: Loss = {train_losses[-1]:.4f}, Accuracy = {test_accuracies[-1]:.4f}")